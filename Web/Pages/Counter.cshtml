@page "/counter"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using System.Threading;

@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper


<section id="game">
    <section id="guess-screen">
        @if(roundEnded)
        {
            <button class="btn btn-primary" onclick="@StartNextRound" hidden="@(!roundEnded)" > Next round </button>
            <p> End of round!</p>
        }
        else
        {
            <div id="guess-centered">
                <p> Round @game?.CurrentRound - Fight! </p>

                <h1>
                    <img style="height:40px" src="/img/user.svg" />
                     @game?.CurrentPlayer?.Name 
                </h1>
            
                @if(game?.CurrentWord != null)
                {
                    <p class="word" style="font-size:@CalculateFontSize()" > @game.CurrentWord</p>
                    <p class="timer" > @remainingTime</p>
                }

                <div class="buttons">
                    <button  onclick="@IncrementCount" hidden="@isWorking"> START </button>
                    <button class="guess-btn" onclick="@DoSomething" hidden="@(!isWorking)">          <img src="/img/success.svg" /> </button>
                </div>
            </div>
        }
    </section>
    <section id="scores">
        <ScoreScreen Scores="@game?.GetScores()" />
    </section>
</section>

@functions {
    bool isWorking = false;
    bool roundEnded = false;
    Game game;
    
    TimeSpan remainingTime;
    TimeSpan tickRate = TimeSpan.FromSeconds(1);

    protected override void OnInit()
    {
        var words = Storage.GetItem<string[]>("all-words");
        var players = Storage.GetItem<Player[]>("players");

        if(words == null || players == null)
            UriHelper.NavigateTo("/words");

        else game = new Game(words, players);
    }


    async Task IncrementCount()
    {
        isWorking = true;
        roundEnded = false;

        remainingTime = game.TurnTime;
        var playerTurn = game.PlayTurn();

        while(remainingTime.TotalMilliseconds > 0 && !roundEnded)
        {
            await Task.Delay(tickRate);
            remainingTime = remainingTime.Subtract(tickRate);
            this.StateHasChanged();
        }

        await playerTurn;
        isWorking = false;
    }

    async Task DoSomething()
    {
        if(remainingTime.TotalSeconds < 1)
            return;

        game.GuessWord();
    
        if(game.CurrentWord == null){
            Console.WriteLine("End of round");
            roundEnded = true;
        }
        
        await Sounds.Success();
    }

    void StartNextRound()
    {
        game.FinishRound();
        roundEnded = false;
        remainingTime = game.TurnTime;
    }


    string CalculateFontSize()
    {
        var length = game?.CurrentWord?.Length ?? 0;
         
        // Map word length interval

        var unit = 1 - ((length - 1) * (1- 0.2) / (45.0 - 1.0));
        return $"calc({unit*8}vh - {unit}vw)";
    }
}
