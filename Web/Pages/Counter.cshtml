@page "/counter"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using System.Threading;

@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper


<section id="game">
    <section id="guess-screen">
        @if(roundEnded)
        {
            <button class="btn btn-primary" onclick="@StartNextRound" hidden="@(!roundEnded)" > Next round </button>
            <p> End of round!</p>
        }
        else
        {
            <h2> Round: @game?.CurrentRound - Fight! </h2>
            <p> @remainingTime</p>

            <h2> @game?.CurrentPlayer?.Name </h2>
            <h3> @game?.CurrentWord</h3>

            <button class="btn btn-primary" onclick="@IncrementCount" hidden="@isWorking" >Start</button>
            <button class="btn btn-primary" onclick="@DoSomething" hidden="@(!isWorking)" > Guess </button>
        }
    </section>
    <section id="scores">
        <ScoreScreen Scores="@game?.GetScores()" />
    </section>
</section>

@functions {
    bool isWorking = false;
    bool roundEnded = false;
    Game game;
    
    TimeSpan remainingTime;
    TimeSpan tickRate = TimeSpan.FromSeconds(1);

    protected override void OnInit()
    {
        var words = Storage.GetItem<string[]>("all-words");
        var players = Storage.GetItem<Player[]>("all-players");

        if(words == null || players == null)
            UriHelper.NavigateTo("/setup");

        else game = new Game(words, players);
    }

    async Task IncrementCount()
    {
        isWorking = true;
        roundEnded = false;

        remainingTime = game.TurnTime;
        var playerTurn = game.PlayTurn();

        while(remainingTime.TotalMilliseconds > 0 && !roundEnded)
        {
            await Task.Delay(tickRate);
            remainingTime = remainingTime.Subtract(tickRate);
            this.StateHasChanged();
        }

        await playerTurn;
        isWorking = false;
    }

    async Task DoSomething()
    {
        game.GuessWord();
    
        if(game.CurrentWord == null){
            Console.WriteLine("End of round");
            roundEnded = true;
        }
        
        await Sounds.Success();
    }

    void StartNextRound()
    {
        game.FinishRound();
        roundEnded = false;
        remainingTime = game.TurnTime;
    }
}
