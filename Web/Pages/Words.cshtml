@page "/words"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<style>
    #setup {
        display: flex;
        justify-content: space-around;
        background: rgb(248, 232, 213);
        min-height: 100vh;
    }

    #setup .players {
        width: 30%;
    }

    #setup .players li {
        padding: 10px;
    }

    #setup #words {
        width: 50%;
        padding: 60px;
        margin: 80px 10px 200px 10px;
        background-color: #fff7d9;
        background-image: url("/img/squares.svg");
        box-shadow: 0px 0px 50px -4px grey;
        border: 1px solid #8e8e8e;
        border-radius: 5px;
        position: relative;
    }

</style>


<section id="setup">
    <section id="players-select" class="players">
        <h1> <img src="/img/team.svg" width="48px" />  PLAYERS </h1>
        <h2> </h2>

        @if(wordsManager.Players.Any())
        {
                <ul>
                    @foreach (var item in wordsManager.Players)
                    {
                        <li class="@(CurrentPlayer == item.Name ? "selected" : null)" onclick="@(() => CurrentPlayer = item.Name)"> 
                             <span class="usr-icon">
                                <img src="/img/user2.svg" />
                             </span>
                             <span class="usr-name">
                                @item.Name 
                             </span>
                             <span>  
                                 @wordsManager.GetWordsCount(item.Name) / @wordsManager.WORDS_PER_PLAYER 
                             </span>
                        </li>
                    }
                </ul>
        }
        else 
        {
            <p> There are no players yet!</p>
        }
    </section>

    <section id="words">
        @if(!String.IsNullOrWhiteSpace(CurrentPlayer))
        {
            <h1 class="right" > @wordForPlayer / @wordsManager.WORDS_PER_PLAYER </h1>
            <h1> @CurrentPlayer </h1>
            <form id="player-words" onsubmit="@AddWord" >
                @if(wordForPlayer < wordsManager.WORDS_PER_PLAYER)
                {
                    <input bind="@newWord" placeholder="Word" type="@(hideInput ? "password" : "text")" />
                    <button class="preview-btn @(!hideInput ? "active" : null)" type="button" onclick="@(() => hideInput = !hideInput)" > 
                        <img src="/img/eye.svg" />    
                    </button>
                    <button class="add-btn" type="submit"> + </button>
                }
            </form>
            <button class="clear-btn" onclick="@ClearWords"  >  <img src="/img/broom.svg" />  </button>
        }
    </section>

   @if(wordsManager.WordsValid)
   {
        <button onclick="@SaveGameData" class="success-btn"> 
            <img src="/img/success.svg" />
            <span> Done </span>
        </button>
   }
</section>






@functions {
    GameData wordsManager;

    private string currentPlayer;
    public string CurrentPlayer
    {
        get { return currentPlayer;}
        set
        {
            this.currentPlayer = value;
            this.wordForPlayer = wordsManager.GetWordsCount(value);
        }
    }
    
    int wordForPlayer;
    string newWord;
    bool hideInput = true;

    override protected void OnInit()
    {
        var storedPlayers = Storage.GetItem<IEnumerable<Player>>("players");

        if(storedPlayers == null || !storedPlayers.Any())
          UriHelper.NavigateTo("/players");

        else
            this.wordsManager = new GameData(storedPlayers ?? Enumerable.Empty<Player>());
    }

    async Task AddWord()
    {
        if(!string.IsNullOrWhiteSpace(newWord))
        {
            wordsManager.AddWord(newWord, currentPlayer);
            this.wordForPlayer = wordsManager.GetWordsCount(currentPlayer);
            newWord = null;
            await Sounds.Success();
        }
    }

    void SaveGameData()
    {
        Storage.SetItem("all-words", wordsManager.GetWords());
        UriHelper.NavigateTo("/game");
    }

    void ClearWords()
    {
        wordsManager.ClearWords(CurrentPlayer);
        wordForPlayer = 0;
    }    
}
