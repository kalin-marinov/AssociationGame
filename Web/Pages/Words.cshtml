@page "/words"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<section id="setup">
    <section class="players">
        <h1> Players </h1>
        <h2> </h2>

        @if(wordsManager.GetPlayers().Any())
        {
                <ul>
                    @foreach (var item in wordsManager.GetPlayers())
                    {
                        <li class="@(CurrentPlayer == item.Name ? "selected" : null)" onclick="@(() => CurrentPlayer = item.Name)"> 
                             <span class="usr-icon">
                                <img src="/img/user.svg" />
                             </span>
                             <span class="usr-name">
                                @item.Name 
                             </span>
                             <span>  
                                 @wordsManager.GetWordsCount(item.Name) / @wordsManager.WORDS_PER_PLAYER 
                             </span>
                        </li>
                    }
                </ul>
        }
        else 
        {
            <p> There are no players yet!</p>
        }
    </section>

    <section id="words">
        @if(!String.IsNullOrWhiteSpace(CurrentPlayer))
        {
            <h1> @CurrentPlayer </h1>
            <h2> @wordForPlayer / @wordsManager.WORDS_PER_PLAYER </h2>
            <form id="player-words" onsubmit="@AddWord" >
                @if(wordForPlayer < wordsManager.WORDS_PER_PLAYER)
                {
                    <input bind="@newWord" placeholder="Word" type="password" />
                    <button type="submit"> Add </button>
                }
            </form>
        }

    </section>
</section>

<button onclick="@SaveGameData" class="success-btn"> 
    <img src="/img/success.svg" />
    <span> Done </span>
</button>




@functions {
    GameData wordsManager;

    private string currentPlayer;
    public string CurrentPlayer
    {
        get { return currentPlayer;}
        set
        {
            this.currentPlayer = value;
            this.wordForPlayer = wordsManager.GetWordsCount(value);
        }
    }
    
    int wordForPlayer;
    string newWord;

    override protected void OnInit()
    {
        var storedPlayers = Storage.GetItem<IEnumerable<Player>>("players");

        if(storedPlayers == null || !storedPlayers.Any())
          UriHelper.NavigateTo("/players");

        else
            this.wordsManager = new GameData(storedPlayers ?? Enumerable.Empty<Player>());
    }

    async Task AddWord()
    {
        if(!string.IsNullOrWhiteSpace(newWord))
        {
            wordsManager.AddWord(newWord, currentPlayer);
            this.wordForPlayer = wordsManager.GetWordsCount(currentPlayer);
            newWord = null;
            await Sounds.Success();
        }
    }

    void SaveGameData()
    {
        Storage.SetItem("all-words", wordsManager.GetWords());
        UriHelper.NavigateTo("/counter");
    }    
}
