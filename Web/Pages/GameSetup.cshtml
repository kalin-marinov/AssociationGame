@page "/setup"
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<section id="setup">
    <section id="players">
        <h1> Players </h1>
        <h2> </h2>

        @if(players.Any())
        {
                <ul>
                    @foreach (var item in players)
                    {
                        <li class="@(CurrentPlayer == item.Name ? "selected" : null)" onclick="@(() => CurrentPlayer = item.Name)"> 
                             <img src="/img/user.svg" />
                             @item.Name 
                            <span>  @wordsManager.GetWordsCount(item.Name) / @wordsManager.WORDS_PER_PLAYER </span>
                        </li>
                    }
                </ul>
        }
        else 
        {
            <p> There are no players yet!</p>
        }

        <form onsubmit="@AddPlayer">
            <input bind="@newPlayerName" placeholder="Player name" />
            <button type="submit" class="add-btn" > + </button>
        </form>
    </section>

    <section id="words">
        @if(!String.IsNullOrWhiteSpace(CurrentPlayer))
        {
            <h1> @CurrentPlayer </h1>
            <h2> @wordForPlayer / @wordsManager.WORDS_PER_PLAYER </h2>
            <form id="player-words" onsubmit="@AddWord" >
                @if(wordForPlayer < wordsManager.WORDS_PER_PLAYER)
                {
                    <input bind="@newWord" placeholder="Word" type="password" />
                    <button type="submit"> Add </button>
                }
            </form>
        }

    </section>
</section>

<button onclick="@SaveGameData" class="success-btn"> 
    <img src="/img/success.svg" />
    <span> Done </span>
</button>





@functions {

    GameData wordsManager = new GameData();
    IEnumerable<Player> players = Enumerable.Empty<Player>();

    string newPlayerName;

    private string currentPlayer;
    public string CurrentPlayer
    {
        get { return currentPlayer;}
        set
        {
            this.currentPlayer = value;
            this.wordForPlayer = wordsManager.GetWordsCount(value);
        }
    }
    
    int wordForPlayer;
    string newWord;

    void AddPlayer()
    {
        wordsManager.AddPlayer(newPlayerName);
        this.players = wordsManager.GetPlayers();
        this.CurrentPlayer = newPlayerName;
        newPlayerName = null;
    }

    async Task AddWord()
    {
        if(!string.IsNullOrWhiteSpace(newWord))
        {
            wordsManager.AddWord(newWord, currentPlayer);
            this.wordForPlayer = wordsManager.GetWordsCount(currentPlayer);
            newWord = null;
            await Sounds.Success();
        }
    }

    void SaveGameData()
    {
        Storage.SetItem("all-words", wordsManager.GetWords());
        Storage.SetItem("all-players", wordsManager.GetPlayers());
        UriHelper.NavigateTo("/counter");
    }    
}
